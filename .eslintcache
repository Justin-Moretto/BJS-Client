[{"/home/justin/lighthouse/deploy/BJS-Client/src/index.js":"1","/home/justin/lighthouse/deploy/BJS-Client/src/reportWebVitals.js":"2","/home/justin/lighthouse/deploy/BJS-Client/src/App.jsx":"3","/home/justin/lighthouse/deploy/BJS-Client/src/components/Withdraw.jsx":"4","/home/justin/lighthouse/deploy/BJS-Client/src/components/Home.jsx":"5","/home/justin/lighthouse/deploy/BJS-Client/src/components/Login.jsx":"6","/home/justin/lighthouse/deploy/BJS-Client/src/components/Header.jsx":"7","/home/justin/lighthouse/deploy/BJS-Client/src/components/Deposit.jsx":"8","/home/justin/lighthouse/deploy/BJS-Client/src/components/Rules.jsx":"9","/home/justin/lighthouse/deploy/BJS-Client/src/components/Strategy.jsx":"10","/home/justin/lighthouse/deploy/BJS-Client/src/hooks/useApplicationData.js":"11","/home/justin/lighthouse/deploy/BJS-Client/src/helpers/cardLogic.js":"12","/home/justin/lighthouse/deploy/BJS-Client/src/components/Actions.jsx":"13","/home/justin/lighthouse/deploy/BJS-Client/src/components/Table.jsx":"14","/home/justin/lighthouse/deploy/BJS-Client/src/components/Chips.jsx":"15","/home/justin/lighthouse/deploy/BJS-Client/src/components/Popup.jsx":"16","/home/justin/lighthouse/deploy/BJS-Client/src/hooks/helpers.js":"17","/home/justin/lighthouse/deploy/BJS-Client/src/components/Hand.jsx":"18","/home/justin/lighthouse/deploy/BJS-Client/src/components/Card.jsx":"19","/home/justin/lighthouse/deploy/BJS-Client/src/components/Credits.jsx":"20","/home/justin/lighthouse/deploy/BJS-Client/src/Firebase.js":"21"},{"size":573,"mtime":1618192302973,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1612370239484,"results":"24","hashOfConfig":"23"},{"size":1282,"mtime":1618189393504,"results":"25","hashOfConfig":"23"},{"size":1412,"mtime":1612370239476,"results":"26","hashOfConfig":"23"},{"size":6229,"mtime":1618191641548,"results":"27","hashOfConfig":"23"},{"size":2709,"mtime":1612462508824,"results":"28","hashOfConfig":"23"},{"size":1845,"mtime":1617900786074,"results":"29","hashOfConfig":"23"},{"size":1466,"mtime":1612370239468,"results":"30","hashOfConfig":"23"},{"size":1392,"mtime":1612370239472,"results":"31","hashOfConfig":"23"},{"size":459,"mtime":1612463492919,"results":"32","hashOfConfig":"23"},{"size":8119,"mtime":1618188448610,"results":"33","hashOfConfig":"23"},{"size":1571,"mtime":1612372634781,"results":"34","hashOfConfig":"23"},{"size":602,"mtime":1612370239460,"results":"35","hashOfConfig":"23"},{"size":1885,"mtime":1617897635102,"results":"36","hashOfConfig":"23"},{"size":1663,"mtime":1618454287781,"results":"37","hashOfConfig":"23"},{"size":499,"mtime":1618453345353,"results":"38","hashOfConfig":"23"},{"size":1293,"mtime":1612479810619,"results":"39","hashOfConfig":"23"},{"size":1271,"mtime":1612370239468,"results":"40","hashOfConfig":"23"},{"size":155,"mtime":1612370239468,"results":"41","hashOfConfig":"23"},{"size":1033,"mtime":1618453787717,"results":"42","hashOfConfig":"23"},{"size":595,"mtime":1618452374292,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"1gdo6hq",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/justin/lighthouse/deploy/BJS-Client/src/index.js",["93"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios'\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["94","95"],"/home/justin/lighthouse/deploy/BJS-Client/src/reportWebVitals.js",[],"/home/justin/lighthouse/deploy/BJS-Client/src/App.jsx",["96","97","98","99","100"],"import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Header from \"./components/Header\";\nimport Withdraw from \"./components/Withdraw\";\nimport Deposit from \"./components/Deposit\";\nimport Rules from \"./components/Rules\";\nimport Strategy from \"./components/Strategy\";\nimport { useEffect } from \"react\";\nimport firebase from \"./Firebase\";\n\nconst db = firebase.firestore();\ndb.settings({ timestampsInSnapshots: true });\n\n\ndb.collection(\"users\").get().then((snapshot) => {\n  snapshot.docs.forEach(doc => {\n    console.log(doc.data())\n  })\n})\n\n//   .add({\n//     first: \"Ada\",\n//     last: \"Lovelace\",\n//     born: 1815,\n//   })\n//   .then((docRef) => {\n//     console.log(\"Document written with ID: \", docRef.id);\n//   })\n//   .catch((error) => {\n//     console.error(\"Error adding document: \", error);\n//   });\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"Blackjack Switch\";\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n        <div id=\"portal\"></div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/justin/lighthouse/deploy/BJS-Client/src/components/Withdraw.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Home.jsx",["101","102","103","104"],"import { Deck, Hand } from \"../helpers/cardLogic\";\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nimport Table from \"./Table\";\nimport Chips from \"./Chips\";\nimport Actions from './Actions';\n\nimport \"./CSS/Home.css\";\n\nlet deck = new Deck(6);\nlet dealer = new Hand();\n\n//REFACTOR EVERYTHING\nlet totalWins = 0;\nlet totalLosses = 0;\nlet totalDraws = 0;\nlet totalBlackjacks = 0;\n\nlet dealerFirstHit = false;\n\nexport default function Home(props) {\n  const {\n    state,\n    updateHand,\n    spawnSplitHand,\n    updateActions,\n    addBet,\n    clearBet,\n    updateBet,\n    calculateBet,\n    recordStats\n  } = useApplicationData();\n\n  let hand = state.hand;\n  let currentHand = state.currentHand;\n  let actions = state.actions;\n  let bet = state.bet;\n  let bankroll = state.bankroll;\n  let initBankroll = state.initBankroll;\n\n  \n\n  const checkBlackjack = () => {\n    if (hand[currentHand]) {\n      if (hand[currentHand].value >= 21 && state.turn === \"player\") {\n        stay()\n      }\n    }\n  }\n\n  const deal = () => {\n    if (bet <= 0){\n      window.alert(`Place a bet to play!`)\n    } else{\n      actions.deal.enabled = false;\n      updateActions(-1, \"deal\")\n  \n      setTimeout(() => { hit(hand[0]) }, 350);\n      setTimeout(() => { hit(hand[0]) }, 1400);\n  \n      setTimeout(() => { hit(hand[1]) }, 700);\n      setTimeout(() => { hit(hand[1]) }, 1750);\n  \n      setTimeout(() => { hit(dealer) }, 1050);\n      setTimeout(() => { updateActions(0, \"player\") }, 2200);\n    }\n  }\n  actions.deal.execute = () => deal();\n\n  const hit = async (hand) => {\n    hand.add(deck.draw())\n    updateHand(hand);\n    actions.switch.enabled = false;\n  }\n  actions.hit.execute = () => hit(hand[currentHand]);\n\n  const stay = () => {\n    if (currentHand < hand.length - 1) {\n      updateHand(hand[currentHand]);\n      currentHand++\n      updateActions(currentHand, \"player\");\n    } else if (currentHand === hand.length - 1) {\n      updateActions(-1, \"dealer\");\n    }\n  }\n  actions.stay.execute = () => stay();\n\n  const split = () => {\n    if (bet > bankroll) {\n      window.alert(`Insufficient funds, you are missing ${bet - bankroll}$`)\n    } else {\n      if (hand[currentHand].canSplit === true) {\n        hand[currentHand].canSplit = false;\n        let newHand = new Hand(hand[currentHand].splitHand(), bet)\n        spawnSplitHand(newHand);\n        updateHand(hand[currentHand]);\n        updateHand(hand[currentHand + 1]);\n        setTimeout(() => { hit(hand[currentHand]) }, 500);\n        setTimeout(() => { hit(hand[currentHand + 1]) }, 1000);\n        updateBet(bet);\n      }\n    }\n  }\n  actions.split.execute = () => split();\n\n  const doubleDown = () => {\n    if (bet > bankroll) {\n      window.alert(`Insufficient funds, you are missing ${bet - bankroll}$`)\n    } else {\n      hit(hand[currentHand]);\n      hand[currentHand].bet += bet;\n      updateHand(hand[currentHand]);\n      updateBet(bet);\n      stay();\n    }\n  }\n  actions.double.execute = () => doubleDown();\n\n  //switch is not allowed as a function name in js, use swap instead\n  const swap = (hand1, hand2) => {\n    if (actions.switch.enabled) {\n      let temp = hand1.cards[1];\n      hand1.cards[1] = hand2.cards[1];\n      hand2.cards[1] = temp;\n      updateHand(hand1);\n      updateHand(hand2);\n    }\n  }\n  actions.switch.execute = () => swap(hand[0], hand[1]);\n  \n  const clearTable = () => {\n    updateActions(-1, \"bet\");\n    setTimeout(()=> {\n      dealer = new Hand();\n      clearBet()\n    }, 600)\n  }\n  actions.reset.execute = () => clearTable();\n\n  const dealerPlays = () => {\n    if (state.turn === \"dealer\") {\n      if (dealer.value < 17 || (dealer.ace > 0 && dealer.value === 17)) {\n        hit(dealer).then(res => {\n          setTimeout(() => { dealerPlays() }, 700);\n        })\n      } else {\n        dealerFirstHit = false;\n        updateActions(-1, \"reveal\");\n        recordStats(hand);\n      }\n    }\n  }\n\n  if (state.turn === \"dealer\" && dealerFirstHit === false) {\n    dealerFirstHit = true;\n    dealerPlays();\n  }\n\n  checkBlackjack();\n\n  // shuffle\n  if (state.turn === \"reveal\" && deck.cards.length < deck.resetCards.length / 2) {\n    deck.reset()\n  }\n\n  if (hand[currentHand] && state.turn === \"player\") {\n    actions.split.enabled = hand[currentHand].canSplit;\n    if (hand[currentHand].cards.length > 2) actions.double.enabled = false;\n  }\n\n\n  const isKeyPressed = {\n    'h': false,\n    's': false,\n    'd': false,\n    'p': false,\n    'c': false,\n    'b': false,\n    'n': false,\n    'x': false,\n    'q': false,\n    'w': false,\n    'e': false,\n    'r': false,\n\n  }\n\n  document.onkeydown = (keyDownEvent) => {\n\n    isKeyPressed[keyDownEvent.key] = true;\n    if (isKeyPressed[\"h\"]) {\n      hit(hand[currentHand])\n    }\n    if (isKeyPressed[\"s\"]) {\n      stay()\n    }\n    if (isKeyPressed[\"d\"]) {\n      doubleDown()\n    }\n    if (isKeyPressed[\"p\"]) {\n      split()\n    }\n    if (isKeyPressed[\"c\"]) {\n      clearBet()\n    }\n    if (isKeyPressed[\"b\"]) {\n      clearTable()\n    }\n    if (isKeyPressed[\"n\"]) {\n      deal()\n    }\n    if (isKeyPressed[\"x\"]) {\n      swap(hand[0], hand[1])\n    }\n    if (isKeyPressed[\"q\"]) {\n      addBet(5)\n    }\n    if (isKeyPressed[\"w\"]) {\n      addBet(25)\n    }\n    if (isKeyPressed[\"e\"]) {\n      addBet(100)\n    }\n    if (isKeyPressed[\"r\"]) {\n      addBet(500)\n    }\n  }\n\n  const connectingToServer = () => {\n    if (state.connectingToServer) {\n      return (\n        <div>\n          <h3>Connecting to server...</h3>\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div class=\"table\" >\n      <Table\n        cardLibrary={state.cards}\n        deck={deck}\n        hand={hand}\n        dealer={dealer}\n        currentHand={currentHand}\n        stats={state.stats}\n        bet={bet}\n        calculateBet={calculateBet}\n        turn={state.turn}\n      />\n      {connectingToServer()}\n      <Actions\n        actions={actions}\n      />\n      <Chips\n        addBet5={() => addBet(5)}\n        addBet25={() => addBet(25)}\n        addBet100={() => addBet(100)}\n        addBet500={() => addBet(500)}\n        maxBet={() => addBet(state.bankroll/2)}\n        clearBet={() => clearBet()}\n        bet={bet}\n        bankroll={bankroll}\n        initialBankroll={initBankroll}\n        turn={state.turn}\n        hand={hand}\n      />\n    </div>\n  )\n}","/home/justin/lighthouse/deploy/BJS-Client/src/components/Login.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Header.jsx",["105"],"import React, { useEffect, useState } from \"react\";\nimport Popup from \"./Popup\";\nimport Rules from \"./Rules\";\nimport Strategy from \"./Strategy\";\nimport Credits from \"./Credits\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./CSS/Header.css\";\nimport \"./CSS/Popup.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default function Header(props, send) {\n  const [selectedMenu, setSelectedMenu] = useState(null);\n\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n      <Nav className=\"mr-auto\">\n        <button onClick={() => setSelectedMenu(\"rules\")}>Rules </button>\n        <Popup\n          open={selectedMenu === \"rules\"}\n          onClose={() => setSelectedMenu(null)}\n        >\n          <Rules onClose={() => setSelectedMenu(null)}></Rules>\n        </Popup>\n\n        <button onClick={() => setSelectedMenu(\"strategy\")}>Strategy</button>\n        <Popup\n          open={selectedMenu === \"strategy\"}\n          onClose={() => setSelectedMenu(null)}\n        >\n          <Strategy onClose={() => setSelectedMenu(null)}></Strategy>\n        </Popup>\n\n        <button onClick={() => setSelectedMenu(\"credits\")}>Credits</button>\n        <Popup\n          open={selectedMenu === \"credits\"}\n          onClose={() => setSelectedMenu(null)}\n        >\n          <Credits onClose={() => setSelectedMenu(null)}></Credits>\n        </Popup>\n\n        <button onClick={() => setSelectedMenu(\"credits\")}>Statistics</button>\n        <Popup\n          open={selectedMenu === \"credits\"}\n          onClose={() => setSelectedMenu(null)}\n        >\n          <Credits onClose={() => setSelectedMenu(null)}></Credits>\n        </Popup>\n      </Nav>\n\n      <h3>\n        <span id=\"bj\"> Blackjack </span>\n        <span id=\"switch\"> Switch! </span>\n      </h3>\n    </Navbar>\n  );\n}\n","/home/justin/lighthouse/deploy/BJS-Client/src/components/Deposit.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Rules.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Strategy.jsx",["106"],"import { Button, Form } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./CSS/Popup.css\"\nimport strategy from \"./images/bj_switch.gif\"\n\n\nexport default function Strategy( { onClose } ) {\n    return (\n\n        <div>\n                <div>\n                    <img src={strategy} alt=\"Whoops\"></img>\n                </div>\n                <Button variant=\"outline-danger\" onClick={onClose} >close</Button>\n        </div>\n    )\n}\n\n\n\n","/home/justin/lighthouse/deploy/BJS-Client/src/hooks/useApplicationData.js",["107","108"],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { checkResult, calculateBankrollChange } from \"./helpers.js\"\nimport { Hand } from \"../helpers/cardLogic\";\n\nexport default function useApplicationData() {\n\n  const [state, setState] = useState({\n    cards: [],\n    hand: [],\n    dealer: {},\n    currentHand: -1,\n    turn: null,\n    winnings: 0,\n    bankroll: 10000,\n    bet: 0,\n    initBankroll: 10000,\n    actions: {\n      reset: {\n        name: \"New Bet\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      deal: {\n        name: \"Deal\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      switch: {\n        name: \"Switch\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      split: {\n        name: \"Split\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      double: {\n        name: \"Double\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      stay: {\n        name: \"Stay\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n      hit: {\n        name: \"Hit\",\n        enabled: false,\n        execute: () => console.log(\"action function error\"),\n      },\n    },\n    stats: {\n      totalWins: 0,\n      totalLosses: 0,\n      totalDraws: 0,\n      totalBlackjacks: 0,\n      totalHands: 0\n    },\n    connectingToServer: true\n  })\n\n  const recordStats = (hands) => {\n    //  console.log(`Record Stats before: wins ${totalWins} losses ${totalLosses} draws ${totalDraws} `)\n    let wins = 0;\n    let losses = 0;\n    let draws = 0;\n    let blackjacks = 0;\n    let turnHands = 0;\n\n    for (const hand of hands) {\n      turnHands++;\n      switch (hand.result) {\n        case \"WIN\":\n          wins++;\n          break;\n        case \"LOSS\":\n          losses++;\n          break;\n        case \"BUST\":\n          losses++;\n          break;\n        case \"PUSH\":\n          draws++;\n          break;\n        case \"BLACKJACK\":\n          wins++;\n          blackjacks++;\n          break;\n      }\n    }\n\n    let stats = {\n      totalWins: state.stats.totalWins + wins,\n      totalLosses: state.stats.totalLosses + losses,\n      totalDraws: state.stats.totalDraws + draws,\n      totalBlackjacks: state.stats.totalBlackjacks + blackjacks,\n      totalHands: state.stats.totalHands + turnHands\n    }\n\n    setState(prev => ({ ...prev, stats: stats }));\n  }\n\n  //Get's our card informations\n  useEffect(() => {\n    Promise.all([\n      axios.get('https://blackjack-switch-server.herokuapp.com/api/cards',\n        { headers: { 'Access-Control-Allow-Origin': '*' } }\n      )\n    ]).then((all) => {\n      let hand = []\n      hand[0] = new Hand();\n      hand[1] = new Hand();\n      let dealer = new Hand();\n      let updateActions = state.actions\n      updateActions.deal.enabled = true;\n      setState(prev => ({\n        ...prev,\n        cards: all[0].data,\n        hand: hand,\n        dealer: dealer,\n        turn: \"bet\",\n        actions: updateActions,\n        connectingToServer: false\n      }))\n    });\n  }, []);\n\n\n  const sendBankroll = () => {\n    let bankroll = state.bankroll;\n    return bankroll;\n  }\n\n  //betting / money handling\n  const updateBankroll = (newBankroll) => {\n    setState(prev => ({ ...prev, bankroll: newBankroll, initBankroll: newBankroll }));\n  }\n\n  const addBet = (amount) => {\n    let bankroll = state.bankroll;\n    if (amount * 2 > bankroll) {\n      window.alert(`Insufficient funds! you are missing $${(amount * 2 - bankroll)}`)\n    } else {\n      bankroll = state.bankroll - (amount * state.hand.length);\n      let bet = state.bet + amount;\n      let hands = state.hand;\n      for (const hand of hands) {\n        hand.bet = bet;\n      }\n      setState(prev => ({ ...prev, hand: hands, bankroll: bankroll, bet: bet }));\n    }\n  }\n\n  //updateBet is called on splits and double-downs\n  const updateBet = (amount) => {\n    let bankroll = state.bankroll - amount;\n    setState(prev => ({ ...prev, bankroll: bankroll }));\n  }\n\n  const clearBet = () => {\n    let initBankroll = state.initBankroll\n    let hand = []\n    hand[0] = new Hand();\n    hand[1] = new Hand();\n    let dealer = new Hand();\n    setState(prev => ({ ...prev, bankroll: initBankroll, bet: 0, hand: hand, dealer: dealer }));\n  }\n\n  ///Hand manipulation\n  const updateHand = (hand) => {\n    let value = 0;\n    let aces = hand.ace;\n    //first calculates this hand's value and aces\n    for (const card of hand.cards) {\n      let cardInfo = state.cards.find(info => info.name === card);\n      value += cardInfo.value;\n      if (cardInfo.ace === true) aces++;\n    }\n    for (let i = aces; i > 0; i--) {\n      if (value > 21) {\n        value -= 10;\n      }\n    }\n    //checks if splitting should be possible\n    if (state.turn !== \"dealer\") {\n      if (hand.cards.length === 2) {\n        let card1value = state.cards.find(x => x.name === hand.cards[0]).value;\n        let card2value = state.cards.find(x => x.name === hand.cards[1]).value;\n        if (card1value === card2value) {\n          hand.canSplit = true;\n        } else {\n          hand.canSplit = false;\n        }\n      } else {\n        hand.canSplit = false;\n      }\n    }\n    hand.value = value;\n    setState(prev => ({ ...prev, [hand]: hand }));\n  }\n\n  const spawnSplitHand = (newHand) => {\n    let updateHands = state.hand;\n    let currentHand = state.currentHand\n    if (currentHand < updateHands.length) {\n      updateHands.splice((currentHand + 1), 0, newHand)\n    } else {\n      updateHands.push(currentHand);\n    }\n    setState(prev => ({ ...prev, hand: updateHands }))\n  }\n\n  const verifyResults = async (hands) => {\n    let hand = hands;\n    for (let i = 0; i < hand.length; i++) {\n      hand[i].result = checkResult(hand[i], state.dealer);\n      updateHand(hand[i]);\n    }\n    return hand;\n  }\n\n  //updateActions sets available actions for the player based on the current turn/phase.\n  //player's bankroll is updated in back-end databse on reveal phase\n  const updateActions = (currentHand, phase) => {\n    let updateActions = state.actions\n    switch (phase) {\n      case \"reveal\":\n        updateActions.reset.enabled = true;\n        updateActions.split.enabled = false;\n        verifyResults(state.hand).then(res => {\n          calculateBankrollChange(res, state.bankroll).then(res => {\n            updateBankroll(res);\n          })\n        })\n        break;\n      case \"bet\":\n        updateActions.deal.enabled = true;\n        updateActions.reset.enabled = false;\n        updateActions.split.enabled = false;\n        break;\n      case \"deal\":\n        updateActions.deal.enabled = false;\n        updateActions.reset.enabled = false;\n        updateActions.split.enabled = false;\n        break;\n      case \"player\":\n        let swapStatus = (currentHand === 0 && state.hand[1].cards.length === 2 && state.hand.length === 2)\n        updateActions.deal.enabled = false;\n        updateActions.hit.enabled = true;\n        updateActions.stay.enabled = true;\n        updateActions.split.enabled = state.hand[currentHand].canSplit;\n        updateActions.switch.enabled = swapStatus;\n        updateActions.double.enabled = true;\n        break;\n      case \"dealer\":\n        updateActions.deal.enabled = false;\n        updateActions.hit.enabled = false;\n        updateActions.stay.enabled = false;\n        updateActions.split.enabled = false;\n        updateActions.switch.enabled = false;\n        updateActions.double.enabled = false;\n        break;\n      default:\n        updateActions.deal.enabled = false;\n        updateActions.hit.enabled = false;\n        updateActions.stay.enabled = false;\n        updateActions.split.enabled = false;\n        updateActions.switch.enabled = false;\n        updateActions.double.enabled = false;\n    }\n    setState(prev => ({ ...prev, currentHand: currentHand, actions: updateActions, turn: phase }))\n  }\n\n  return {\n    state, updateHand,\n    spawnSplitHand, updateActions,\n    updateBankroll, addBet, clearBet, updateBet, sendBankroll, recordStats\n  }\n}","/home/justin/lighthouse/deploy/BJS-Client/src/helpers/cardLogic.js",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Actions.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Table.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Chips.jsx",["109"],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Popup.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/hooks/helpers.js",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Hand.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Card.jsx",[],"/home/justin/lighthouse/deploy/BJS-Client/src/components/Credits.jsx",["110","111"],"/home/justin/lighthouse/deploy/BJS-Client/src/Firebase.js",[],{"ruleId":"112","severity":1,"message":"113","line":6,"column":8,"nodeType":"114","messageId":"115","endLine":6,"endColumn":13},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"112","severity":1,"message":"120","line":4,"column":8,"nodeType":"114","messageId":"115","endLine":4,"endColumn":13},{"ruleId":"112","severity":1,"message":"121","line":6,"column":8,"nodeType":"114","messageId":"115","endLine":6,"endColumn":16},{"ruleId":"112","severity":1,"message":"122","line":7,"column":8,"nodeType":"114","messageId":"115","endLine":7,"endColumn":15},{"ruleId":"112","severity":1,"message":"123","line":8,"column":8,"nodeType":"114","messageId":"115","endLine":8,"endColumn":13},{"ruleId":"112","severity":1,"message":"124","line":9,"column":8,"nodeType":"114","messageId":"115","endLine":9,"endColumn":16},{"ruleId":"112","severity":1,"message":"125","line":14,"column":5,"nodeType":"114","messageId":"115","endLine":14,"endColumn":14},{"ruleId":"112","severity":1,"message":"126","line":15,"column":5,"nodeType":"114","messageId":"115","endLine":15,"endColumn":16},{"ruleId":"112","severity":1,"message":"127","line":16,"column":5,"nodeType":"114","messageId":"115","endLine":16,"endColumn":15},{"ruleId":"112","severity":1,"message":"128","line":17,"column":5,"nodeType":"114","messageId":"115","endLine":17,"endColumn":20},{"ruleId":"112","severity":1,"message":"129","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"130","line":1,"column":18,"nodeType":"114","messageId":"115","endLine":1,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":75,"column":7,"nodeType":"133","messageId":"134","endLine":92,"endColumn":8},{"ruleId":"135","severity":1,"message":"136","line":129,"column":6,"nodeType":"137","endLine":129,"endColumn":8,"suggestions":"138"},{"ruleId":"112","severity":1,"message":"139","line":5,"column":8,"nodeType":"114","messageId":"115","endLine":5,"endColumn":11},{"ruleId":"140","severity":1,"message":"141","line":14,"column":9,"nodeType":"142","endLine":18,"endColumn":10},{"ruleId":"140","severity":1,"message":"141","line":25,"column":9,"nodeType":"142","endLine":25,"endColumn":79},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["143"],"no-negated-in-lhs",["144"],"'Login' is defined but never used.","'Withdraw' is defined but never used.","'Deposit' is defined but never used.","'Rules' is defined but never used.","'Strategy' is defined but never used.","'totalWins' is assigned a value but never used.","'totalLosses' is assigned a value but never used.","'totalDraws' is assigned a value but never used.","'totalBlackjacks' is assigned a value but never used.","'useEffect' is defined but never used.","'Form' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.actions'. Either include it or remove the dependency array.","ArrayExpression",["145"],"'max' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},"Update the dependencies array to be: [state.actions]",{"range":"148","text":"149"},[3189,3191],"[state.actions]"]